package main

import (
	"crypto/tls"
	"errors"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/Pallinder/go-randomdata"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/websocket/v2"
	"golang.org/x/crypto/acme/autocert"
)

func main() {
	cfg, err := configureAutocert()
	if err != nil {
		log.Fatalln("Autocert configure error:", err)
	}
	log.Println("Using LetsEncrypt autogenerated TLS!")

	listen := getExampleServer(cfg)
	log.Fatalln(listen(":https"))
}

type listenFunc func(addr string) error

func getExampleServer(cfg *tls.Config) listenFunc {
	mux := http.NewServeMux()
	mux.HandleFunc("/", func(rw http.ResponseWriter, r *http.Request) {
		rw.Write([]byte("Hello world!"))
	})

	server := &http.Server{
		Handler:   mux,
		TLSConfig: cfg,
	}

	return func(addr string) error {
		server.Addr = addr
		return server.ListenAndServeTLS("", "")
	}
}

func getApp(cfg *tls.Config) listenFunc {
	app := fiber.New(fiber.Config{
		ReadTimeout:  1 * time.Second,
		WriteTimeout: 1 * time.Second,
		IdleTimeout:  30 * time.Second,
	})

	app.Use(cors.New(cors.Config{
		AllowOrigins: "popthegrid.com, www.popthegrid.com",
	}))

	app.Use("/", func(c *fiber.Ctx) error {
		if websocket.IsWebSocketUpgrade(c) {
			c.Locals("allowed", true)
			return c.Next()
		}
		return fiber.ErrUpgradeRequired
	})

	app.Get("/", websocket.New(func(c *websocket.Conn) {
		for {
			if err := c.WriteJSON(map[string]interface{}{
				"name": randomdata.SillyName(),
			}); err != nil {
				log.Println("Write:", err)
				break
			}
			time.Sleep(time.Second * 2)
		}
	}))

	app.Get("/home", func(c *fiber.Ctx) error {
		return c.SendString("Hello world!")
	})

	return func(addr string) error {
		ln, err := tls.Listen("tcp", addr, cfg)
		if err != nil {
			return err
		}

		return app.Listener(ln)
	}
}

func configureAutocert() (*tls.Config, error) {
	certCacheDir := os.Getenv("CERTS_CACHE_DIR")
	log.Println(certCacheDir)
	if certCacheDir == "" {
		return nil, errors.New("unspecified certificates cache directoy: environment variable CERTS_CACHE_DIR is missing")
	}
	m := &autocert.Manager{
		Prompt:     autocert.AcceptTOS,
		HostPolicy: autocert.HostWhitelist("popthegrid.com", "www.popthegrid.com", "test.popthegrid.com"),
		Cache:      autocert.DirCache(certCacheDir),
	}
	go http.ListenAndServe(":http", m.HTTPHandler(nil))
	return &tls.Config{
		GetCertificate: m.GetCertificate,
	}, nil
}
